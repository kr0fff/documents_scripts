Index: src/sample1.lua
===================================================================
diff --git a/src/sample1.lua b/src/sample1.lua
deleted file mode 100644
--- a/src/sample1.lua	
+++ /dev/null	
@@ -1,18 +0,0 @@
-function PostExtract(fields, tables, ctx)
-    if fields.Period and fields.Period.Text then
-        local dd, mon, yyyy = fields.Period.Text:match('(%d+)%s*([%a%p]+)%s*(%d%d)')
-        local months =
-        {{hrv = 'ม.ค.', eng = 'jan'}, {hrv = 'ก.พ.', eng = 'feb'}, {hrv = 'มี.ค.', eng = 'mar'},
-         {hrv = 'เม.ย.', eng = 'apr'}, {hrv = 'พ.ค.', eng = 'may'}, {hrv = 'มิ.ย.', eng = 'jun'},
-         {hrv = 'ก.ค.', eng = 'jul'}, {hrv = 'ส.ค.', eng = 'aug'}, {hrv = 'ก.ย.', eng = 'sep'},
-         {hrv = 'ต.ค.', eng = 'oct'}, {hrv = 'พ.ย.', eng = 'nov'}, {hrv = 'ธ.ค.', eng = 'dec'}}
-        for _, month in ipairs(months) do
-            if mon == month['hrv'] then
-                mon = month['eng']
-            end
-        end
-        if dd and mon and yyyy then
-            fields.InvoiceDate = ctx:CreateDate(dd .. mon .. yyyy, 'ddmonyyyy')
-        end
-    end
-end
Index: src/sample3.lua
===================================================================
diff --git a/src/sample3.lua b/src/sample3.lua
deleted file mode 100644
--- a/src/sample3.lua	
+++ /dev/null	
@@ -1,57 +0,0 @@
-function PostExtract(fields, tables, ctx)
-    if fields.Trade and fields.Subcontractor and not fields.WorkOrderRefNo then
-        fields.WorkOrderRefNo = fields.Subcontractor.Text .. ' ' .. fields.Trade.Text
-    end
-end
-function Finalize(fields, tables, ctx)
-    if tables.LineItems then
-        local tableDelimiter
-        local items = tables.LineItems
-        for i = 0, tables.LineItems.Length - 1 do
-            local item = tables.LineItems[i]
-            local s = string.gsub(string.lower(item.Description.Text), '%W+', '')
-            if string.find(s, 'contractwork', 1, true) then
-                fields.CertificationOriginalContractValue = fields.SubContractWorkTotal or item.Accumulative.Value
-            end
-            if string.find(s, 'additionalwork', 1, true) then
-                fields.CertificationVariationsValue = fields.AdditionalWorkTotal or item.Accumulative.Value
-            end
-            if string.find(s, 'subtotal', 1, true) and not tableDelimiter then
-                tableDelimiter = i
-            end
-        end
-        if tableDelimiter then
-            for i = items.Length - 1, tableDelimiter + 1, -1 do
-                items:RemoveRow(i)
-            end
-        end
-    end
-    if not fields.WorkOrderRefNo then
-        fields.WorkOrderRefNo = 'NA'
-    end
-    if tables.AppendixA then
-        for i = 0, tables.AppendixA.Length - 1 do
-            local item = tables.AppendixA[i]
-            local s = string.gsub(string.lower(item.Description.Text), '[^a-z]+', '')
-            if string.find(s, 'subtotalcontractworksforwarded', 1, true) then
-                fields.OriginalContractValue = item.Amount.Value
-                fields.ActivityCodeOriginalContract = item.Amount.Value
-            end
-            if string.find(s, 'subtotaladditionalworksforwarded', 1, true) then
-                fields.VariationsValue = item.Amount.Value
-                fields.ActivityCodeVariations = item.Amount.Value
-            end
-        end
-        tables.AppendixA = nil
-    end
-    if tables.AppendixB then
-        for i = tables.AppendixB.Length - 1, 0, -1 do
-            local item = tables.AppendixB[i]
-            if item.Certified.Value or item.AfterRetention.Value or item.Payment.Value then
-                fields.NumOfCertificates = item.Code.Value
-                break
-            end
-        end
-        tables.AppendixB = nil
-    end
-end
\ No newline at end of file
Index: src/sample7.lua
===================================================================
diff --git a/src/sample7.lua b/src/sample7.lua
deleted file mode 100644
--- a/src/sample7.lua	
+++ /dev/null	
@@ -1,118 +0,0 @@
-function PostExtract(fields, tables, ctx)
-    if fields.CustomerCode then
-        local text = ctx['text']
-        local h = text.AvgWordHeight
-        local x0 = text.BBox.Left
-        local y0 = fields.CustomerCode.BBox.Top - h * 2
-        local x1 = text.BBox.Right
-        local y1 = fields.CustomerCode.BBox.Bottom - h * 1
-        text = text:GetArea(x0, y0, x1, y1)
-        if text.Length > 0 then
-            fields.CustomerName = text[0]:ToString()
-        end
-    end
-    if fields._Anchor0 and fields._Anchor1 then
-        local text = ctx['text']
-        text = text:GetArea(text.BBox.Left, fields._Anchor0.BBox.Bottom, text.BBox.Right, fields._Anchor1.BBox.Top)
-        if text.Length > 0 then
-            local receiptIndex
-            local itemPrice
-            local itemQty
-            local itemUOM
-            local description = ''
-            local items = ctx:CreateTable()
-            items:AppendColumn('Description')
-            items:AppendColumn('Qty')
-            items:AppendColumn('UOM')
-            items:AppendColumn('UnitPrice')
-            items:AppendColumn('Total')
-            tables['LineItems'] = items
-            local s = ''
-            for i = 0, text.Length - 1 do
-                local line = text[i]:ToString()
-                if not receiptIndex and line:gsub('[%s%#]+', ''):match('^[0-9]+$') then
-                    receiptIndex = i
-                end
-                if receiptIndex and i > receiptIndex then
-                    local price, qty, uom = line:match('^([%d%,%.]+)[Xx%s]+([%d%,%.]+)%s+([A-Za-z%d]+)')
-                    local total = line:match('(%-?[%d%,%.]+)%s+A$')
-                    if price and qty and uom then
-                        itemPrice = price
-                        itemQty = qty
-                        itemUOM = uom
-                    end
-                    if not price and not qty and not uom and not line:match('Kvitas') then
-                        description = description .. ' ' .. line:gsub('%-?[%d%,%.]+%s+A$', '')
-                    end
-                    if total then
-                        items:AppendRow()
-                        items[-1].UOM = itemUOM or nil
-                        items[-1].UnitPrice = itemPrice and CastToDecimal(itemPrice, ctx) or nil
-                        items[-1].Qty = itemQty and CastToDecimal(itemQty, ctx) or nil
-                        items[-1].Description = description
-                        items[-1].Total = total and CastToDecimal(total, ctx) or nil
-                        description = ''
-                        itemQty = nil
-                        itemPrice = nil
-                        itemUOM = nil
-                    end
-                    if line:match('Nuolaida') then
-                        break
-                    end
-                end
-            end
-            fields.ItemSummary = s
-        end
-    end
-end
-function CastToDecimal(str, ctx)
-    local decimal = str:gsub('%,+', '.')
-    return ctx:CreateDecimal(decimal) or nil
-end
-function Finalize(fields, tables)
-    --[[ SplitSeriesNumber --]] if fields.SeriesNumber then
-        local delimiters = { 'nr', 'no', '-', ' ' }
-        str = string.lower(fields.SeriesNumber.Text)
-        str = string.gsub(str, '[.:,;<>#]+', '')
-        str = string.gsub(str, '^%s*(.-)%s*$', '%1')
-        local result = nil
-        local separator = nil
-        local series = ''
-        local number = ''
-        for i = 1, #delimiters do
-            if string.match(str, delimiters[i]) then
-                local t = {}
-                for str in string.gmatch(str .. delimiters[i], '(.-)' .. delimiters[i]) do
-                    t[#t + 1] = str
-                end
-                result = t
-                separator = delimiters[i]
-                break
-            end
-        end
-        if not result then
-            series, number = string.match(str, '(.-%a)(%d%d%d%d+)')
-            if not series and not number then
-                number = str
-            end
-        else
-            if not string.match(result[1], '%a') then
-                number = str
-            else
-                series = result[1]
-                for i = 2, #result do
-                    number = number == '' and number .. result[i] or number .. separator .. result[i]
-                end
-            end
-        end
-        series = series or ''
-        series = string.gsub(series, '%s+', '')
-        series = string.upper(series)
-        number = number or ''
-        number = string.gsub(number, '%s+', '')
-        number = string.upper(number)
-        fields.Series = series
-        fields.InvoiceNumber = number
-        fields.SeriesNumber = nil
-    end --[[ SplitSeriesNumber --]]
-end
\ No newline at end of file
Index: src/sample5.lua
===================================================================
diff --git a/src/sample5.lua b/src/sample5.lua
deleted file mode 100644
--- a/src/sample5.lua	
+++ /dev/null	
@@ -1,39 +0,0 @@
-function PostExtract(fields, tables, ctx)
-    local items = tables.LineItems
-    items:InsertColumnAt("Qty", "SizeNumeric", "SIZE")
-    items:InsertColumnAt("Qty", "Uom", "UOM")
-
-    for i = 0, items.Length - 1 do
-        if items[i].Description.Value then
-
-            local matchOz = string.lower(items[i].Description.Text):match("([%d%.]+)%s*oz")
-            local matchKeg = string.lower(items[i].Description.Text):match("([%d%/]+)%s*keg")
-            local matchMl = string.lower(items[i].Description.Text):match("(%d+)%s*ml")
-            local matchBbl = string.lower(items[i].Description.Text):match("(%d+%/%d+)%s*bbl")
-            local matchLitres = string.lower(items[i].Description.Text):match("(%d+)%s*l")
-            if matchOz then
-                items[i].SizeNumeric = matchOz
-                items[i].Uom = 'OZ'
-            end
-            if matchKeg then
-                items[i].SizeNumeric = matchKeg
-                items[i].Uom = 'KEG'
-            end
-            if matchMl then
-                items[i].SizeNumeric = matchMl
-                items[i].Uom = 'ML'
-            end
-            if matchBbl then
-                items[i].SizeNumeric = matchBbl
-                items[i].Uom = 'BBL'
-            end
-            if matchLitres then
-                items[i].SizeNumeric = matchLitres
-                items[i].Uom = 'L'
-            end
-        end
-    end
-    for i = items.Length - 1, 0, -1 do
-        if not items[i].Total.Value then items:RemoveRow(i) end
-    end
-end
Index: src/Current.json
===================================================================
diff --git a/src/Current.json b/src/Current.json
deleted file mode 100644
--- a/src/Current.json	
+++ /dev/null	
@@ -1,231 +0,0 @@
-{
-  "data": {
-    "tax": {
-      "text": "2.08",
-      "type": "decimal",
-      "value": "2.08",
-      "confidence": "0.97",
-      "annotations": [
-        "638433250745060390"
-      ]
-    },
-    "date": {
-      "text": "2023.06.09",
-      "type": "date",
-      "value": "1686268800000",
-      "confidence": "0.99",
-      "annotations": [
-        "638433250745060244"
-      ]
-    },
-    "type": "invoice",
-    "pages": [
-      {
-        "count": 1,
-        "offset": 0,
-        "fileIdx": 0
-      }
-    ],
-    "total": {
-      "text": "11.97",
-      "type": "decimal",
-      "value": "11.97",
-      "confidence": "0.97",
-      "annotations": [
-        "638433250745060547"
-      ]
-    },
-    "number": {
-      "type": "string",
-      "value": "61PS20007984",
-      "annotations": [
-        "638433250745060198"
-      ]
-    },
-    "version": "1.2",
-    "subtotal": {
-      "text": "9.89",
-      "type": "decimal",
-      "value": "9.89",
-      "confidence": "0.99",
-      "annotations": [
-        "638433250745060450"
-      ]
-    },
-    "userType": {
-      "type": "string",
-      "value": "VAT Invoice"
-    },
-    "lineItems": {
-      "rows": [
-        {
-          "qty": {
-            "type": "string",
-            "value": null
-          },
-          "tax": {
-            "type": "string",
-            "value": null
-          },
-          "code": {
-            "type": "string",
-            "value": null
-          },
-          "unit": {
-            "type": "string",
-            "value": "Mato vnt .",
-            "annotations": [
-              "638433250745060322",
-              "638433250745060327",
-              "638433250745060349"
-            ]
-          },
-          "total": {
-            "type": "string",
-            "value": null
-          },
-          "nuolRate": {
-            "type": "string",
-            "value": null
-          },
-          "unitPrice": {
-            "type": "string",
-            "value": null
-          },
-          "taxPercent": {
-            "type": "string",
-            "value": null
-          },
-          "description": {
-            "type": "string",
-            "value": "Pavadinimas",
-            "annotations": [
-              "638433250745060337"
-            ]
-          },
-          "unitPriceRounded": {
-            "type": "string",
-            "value": null
-          }
-        }
-      ],
-      "type": "flatTable",
-      "header": [
-        {
-          "id": "code",
-          "name": "Kodas"
-        },
-        {
-          "id": "description",
-          "name": "Pavadinimas"
-        },
-        {
-          "id": "unit",
-          "name": "Mato vnt."
-        },
-        {
-          "id": "qty",
-          "name": "Kiekis"
-        },
-        {
-          "id": "unitPrice",
-          "name": "Kaina Eur be nuol"
-        },
-        {
-          "id": "nuolRate",
-          "name": "Nuol %"
-        },
-        {
-          "id": "unitPriceRounded",
-          "name": "Kaina Eur po nuol"
-        },
-        {
-          "id": "taxPercent",
-          "name": "PVM %"
-        },
-        {
-          "id": "tax",
-          "name": "PVM suma Eur"
-        },
-        {
-          "id": "total",
-          "name": "Suma Eur"
-        }
-      ]
-    },
-    "vatTariff": {
-      "text": "21",
-      "type": "decimal",
-      "value": "21",
-      "confidence": "0.97",
-      "annotations": [
-        "638433250745060544"
-      ]
-    },
-    "currencyCode": {
-      "type": "string",
-      "value": "EUR"
-    },
-    "customerCode": {
-      "type": "string",
-      "value": "304617429",
-      "annotations": [
-        "638433250745060148"
-      ]
-    },
-    "customerName": {
-      "value": "Sostinės karatė mokykla"
-    },
-    "supplierCode": {
-      "type": "string",
-      "value": "165213417",
-      "annotations": [
-        "638433250745060173"
-      ]
-    },
-    "supplierName": {
-      "type": "string",
-      "value": "R. Burškio PĮ"
-    },
-    "supplierTaxId": {
-      "type": "string",
-      "value": "LT652134113",
-      "annotations": [
-        "638433250745060124"
-      ]
-    },
-    "documentSubtypeId": {
-      "type": "string",
-      "value": "2"
-    },
-    "payer": null
-  },
-  "stats": {
-    "lang": [
-      {
-        "code": "eng",
-        "wordCount": 136,
-        "wordRatio": 1
-      }
-    ],
-    "confidence": {
-      "ocr": "0.96",
-      "data": "0.97"
-    }
-  },
-  "template": {
-    "alias": "r_burskio_1_lit_lt"
-  },
-  "exportPdf": {
-    "url": "https://ebitdo.s3.eu-central-1.amazonaws.com/ebitdo/prod/users/37/document/2024-02-12T07_16_12.016Z_2024-02-09T08_00_20.872Z_R.Burs_kio_P.I__2023-06-09_splitted_1__1__splitted.pdf"
-  },
-  "exportTxt": {
-    "url": "https://ebitdo.s3.eu-central-1.amazonaws.com/ebitdo/prod/users/37/document/2024-02-12T07_16_12.016Z_2024-02-09T08_00_20.872Z_R.Burs_kio_P.I__2023-06-09_splitted_1__1__recognizedtext.txt"
-  },
-  "exportTextPdf": {
-    "url": "https://ebitdo.s3.eu-central-1.amazonaws.com/ebitdo/prod/users/37/document/2024-02-12T07_16_12.016Z_2024-02-09T08_00_20.872Z_R.Burs_kio_P.I__2023-06-09_splitted_1__1__recognized.pdf"
-  },
-  "exportTextAnnotation": {
-    "url": "https://ebitdo.s3.eu-central-1.amazonaws.com/ebitdo/prod/users/37/document/2024-02-12T07_16_12.016Z_2024-02-09T08_00_20.872Z_R.Burs_kio_P.I__2023-06-09_splitted_1__1__textannotation.json"
-  }
-}
\ No newline at end of file
Index: src/sample8.lua
===================================================================
diff --git a/src/sample8.lua b/src/sample8.lua
deleted file mode 100644
--- a/src/sample8.lua	
+++ /dev/null	
@@ -1,11 +0,0 @@
-s = "AU Upholstered Bed V3 - Silver Fox - Queen - Box 2 - \"FSC MIXED\" and \"Certi Pur\" AU Upholstered Bed V3 - Silver Fox - Queen - Box 3 - \"FSC MIXED\" and \"Certi Pur\" AU Upholstered Bed V3 - Silver Fox - Queen - Box 4 - \"FSC MIXED\" and \"Certi Pur\" | AU Upholstered Bed V3 - Silver Fox - King - Box 1 - \"FSC MIXED\" and \"Certi Pur\""
-local spaces = s:gsub('%S+', '')
-if string.len(spaces) > 1 then
-    local heading = s:match('^([A-Za-z]+%s[A-Za-z]+)')
-    --[[for line in string.gmatch(s, '(.+)' .. heading  ) do
-        print(line)
-    end]]
-    for line in string.gmatch(s, heading  ) do
-        print(line)
-    end
-end
Index: src/sample0.lua
===================================================================
diff --git a/src/sample0.lua b/src/sample0.lua
deleted file mode 100644
--- a/src/sample0.lua	
+++ /dev/null	
@@ -1,77 +0,0 @@
-function CastToDecimal(str, ctx)
-    local decimal = str:gsub('%.+', ''):match('%d+')
-    return ctx:CreateDecimal(decimal) or nil
-end
-function PostExtract(fields, tables, ctx)
-    if fields._InvoiceTotal then
-        fields.InvoiceTotal = CastToDecimal(fields._InvoiceTotal.Text, ctx)
-    end
-    if fields._Anchor0 and fields.InvoiceNumber then
-        local text = ctx['text']
-        text = text:GetArea(
-                fields._Anchor0.BBox.Right,
-                fields.InvoiceNumber.BBox.Bottom,
-                text.BBox.Right,
-                fields._Anchor0.BBox.Top
-        )
-        if text.Length > 0 then
-            fields.CustomerName = text[0]:ToString():gsub('^[%s%:]+', '')
-        end
-    end
-    if fields._InvoiceDate then
-        local dd, mon, yyyy = fields._InvoiceDate.Text:match('(%d+)%s*([%a%p]+)%s*(%d%d+)')
-        local months = { { ind = 'januari', eng = 'jan' }, { ind = 'februari', eng = 'feb' }, { ind = 'maret', eng = 'mar' }, { ind = 'april', eng = 'apr' }, { ind = 'mei', eng = 'may' }, { ind = 'juni', eng = 'jun' }, { ind = 'juli', eng = 'jul' }, { ind = 'agustus', eng = 'aug' }, { ind = 'september', eng = 'sep' }, { ind = 'oktober', eng = 'oct' }, { ind = 'november', eng = 'nov' }, { ind = 'desember', eng = 'dec' } }
-        for _, month in ipairs(months) do
-            if mon and string.lower(mon) == month['ind'] then
-                mon = month['eng']
-            end
-        end
-        if dd and mon and yyyy then
-            fields.InvoiceDate = ctx:CreateDate(dd .. mon .. yyyy, 'ddmonyyyy') or ctx:CreateDate(dd .. mon .. yyyy, 'ddmonyy') or nil
-        end
-    end
-end
-function Finalize(fields, tables, ctx)
-    if tables.LineItems then
-        local extraTopLineIndex
-        local items = tables.LineItems
-        local strSum = ''
-        for i = items.Length - 1, 0, -1 do
-            if items[i].UnitPrice.Value then
-                items[i].UnitPrice = CastToDecimal(items[i].UnitPrice.Text, ctx)
-            end
-            if items[i].Total.Value then
-                items[i].Total = CastToDecimal(items[i].Total.Text, ctx)
-            end
-            if i > 0 and i < items.Length - 1 and not items[i].Description.Value then
-                local prev = items[i - 1].Description.Value and not items[i - 1].Total.Value and items[i - 1].Description.Text or ''
-                local next = items[i + 1].Description.Value and not items[i + 1].Total.Value and ' ' .. items[i + 1].Description.Text or ''
-                items[i].Description = prev .. next
-                extraTopLineIndex = i - 1
-                items:RemoveRow(i + 1)
-            end
-            if extraTopLineIndex and i == extraTopLineIndex then
-                extraTopLineIndex = nil
-                items:RemoveRow(i)
-            end
-        end
-        for i = items.Length - 1, 0, -1 do
-            if not items[i].Total.Value then
-                strSum = items[i].Description.Value and (items[i].Description.Text .. ' ' .. strSum) or strSum
-                items:RemoveRow(i)
-            else
-                items[i].Description = items[i].Description.Value and (items[i].Description.Text .. ' ' .. strSum) or strSum
-                strSum = ''
-            end
-        end
-        if fields.Discount then
-            local decimal = CastToDecimal(fields.Discount.Text, ctx)
-            items:AppendRow()
-            items[-1].Description = 'Discount'
-            items[-1].Qty = 1
-            items[-1].UnitPrice = decimal and decimal * -1 or nil
-            items[-1].Total = decimal and decimal * -1 or nil
-            fields.Discount = nil
-        end
-    end
-end
\ No newline at end of file
Index: src/sample6.lua
===================================================================
diff --git a/src/sample6.lua b/src/sample6.lua
deleted file mode 100644
--- a/src/sample6.lua	
+++ /dev/null	
@@ -1,2 +0,0 @@
-local textSum, totalSum = '1'
-print( textSum .. ' ' .. textSum)
\ No newline at end of file
Index: src/sample4.lua
===================================================================
diff --git a/src/sample4.lua b/src/sample4.lua
deleted file mode 100644
--- a/src/sample4.lua	
+++ /dev/null	
@@ -1,27 +0,0 @@
-function PostExtract(fields, tables, ctx)
-    if fields.InvoiceTax and not fields.InvoiceTotal then
-        local text = ctx['text']
-        local h = text.AvgWordHeight
-        local x0 = fields.InvoiceTax.BBox.Left
-        local y0 = fields.InvoiceTax.BBox.Bottom
-        local x1 = fields.InvoiceTax.BBox.Right
-        local y1 = fields.InvoiceTax.BBox.Bottom + h * 3
-        text = text:GetArea(x0, y0, x1, y1)
-        if text.Length > 0 then
-            fields.InvoiceTotal = text[0]:ToString()
-        end
-    end
-end
-function Finalize(fields, tables, ctx)
-    if tables and tables.LineItems then
-        local items = tables.LineItems
-        for i = items.Length - 1, 0, -1 do
-            if not items[i].Total.Value then
-                items:RemoveRow(i)
-            end
-        end
-    end
-    if fields.CustomerName then
-        fields.CustomerName = fields.CustomerName.Text:gsub('^[%s%:]+', '')
-    end
-end
\ No newline at end of file
Index: src/sample2.lua
===================================================================
diff --git a/src/sample2.lua b/src/sample2.lua
deleted file mode 100644
--- a/src/sample2.lua	
+++ /dev/null	
@@ -1,5 +0,0 @@
-local res = true
-
-if res then
-    print('erwe')
-end
\ No newline at end of file
